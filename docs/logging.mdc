---
description: Logging runbook using LogTape and Sentry
---
# Logging Runbook

How to emit and ship logs across MCP server, Cloudflare Workers, and React clients using LogTape and Sentry Logs. For tracing, spans, or metrics see @docs/monitoring.mdc.

## Scope
- Adding or updating logging in any package under `packages/mcp-*`
- Instrumenting MCP connection lifecycle, tool handlers, prompts, or resources
- Emitting structured events that must surface in Sentry Logs or Sentry Issues
- Establishing new sinks (Console, Cloudflare Logpush, other observability backends)
- Deciding how to categorize log levels vs. Sentry issue creation

## Implementation Pattern
```typescript
// packages/mcp-server/src/logging.ts
import {
  configureSync,
  getConsoleSink,
  getLogger as getLogTapeLogger,
  parseLogLevel,
} from "@logtape/logtape";
import { getSentrySink } from "@logtape/sentry";

const ROOT_CATEGORY = ["sentry", "mcp"] as const;

function resolveLowestLevel() {
  const candidate = process.env.MCP_LOG_LEVEL ?? process.env.LOG_LEVEL;
  if (candidate) {
    try {
      return parseLogLevel(candidate);
    } catch (error) {
      // fall through to default when value is invalid
    }
  }

  return process.env.NODE_ENV === "development" ? "debug" : "info";
}

configureSync({
  reset: true,
  sinks: {
    console: getConsoleSink({ formatter: getJsonLinesFormatter() }),
    sentry: getSentrySink(),
  },
  loggers: [
    {
      category: ROOT_CATEGORY,
      sinks: ["console", "sentry"],
      lowestLevel: resolveLowestLevel(),
    },
    {
      category: "logtape",
      sinks: ["console"],
      lowestLevel: "error",
    },
  ],
});

export function getLogger(scope: string | readonly string[], defaults?: Record<string, unknown>) {
  const category = Array.isArray(scope) ? scope : [scope];
  const logger = getLogTapeLogger([...ROOT_CATEGORY, ...category]);
  return defaults ? logger.with(defaults) : logger;
}

export const logger = getLogger([]); // default "sentry-mcp" logger

export function logInfo(message: unknown, options?: LogOptions) {
  // delegate to logger.info with structured payloads
}

export function logWarn(message: unknown, options?: LogOptions) {
  // delegate to logger.warn
}

export function logError(message: unknown, options?: LogOptions) {
  // delegate to logger.error without creating a Sentry issue
}

export function logIssue(error: unknown, options?: LogIssueOptions) {
  // captureException + logError including event_id and attachment metadata
}
```
> `getSentrySink()` uses the active Sentry client you configure via `Sentry.init`.
Cloudflare requests use the middleware defined in @packages/mcp-cloudflare/src/server/logging.ts to emit per-request logs. Wrap the Sentry sink with `fromAsyncSink()` in environments where you need non-blocking batching or custom retries. Cloudflare builds reuse the same sink but rely on the Workers `fetch` runtime instead of Node HTTPS.

## Runtime Coverage
- **Node.js (stdio server, CLI tools)**: use the default LogTape bundle with Node-specific transport that posts to Sentry via HTTPS and flushes during process shutdown. Backpressure-sensitive code should favor async batching.
- **Cloudflare Workers**: consume the ESM build plus the Worker-safe Sentry transport (`fetch` + Durable Object queue when available). Avoid Node stream helpers; rely on Workers runtime primitives.
- **React client**: leverage LogTape’s browser build to capture structured telemetry (e.g., chat UI failures). Forward logs via `navigator.sendBeacon` or `fetch` to an edge endpoint that reuses the same Sentry ingestion helper. Continue to use `@sentry/react` for exception tracking.

## Log Categories
- **Category 1 – Issues**: Call `logIssue`. It captures the exception (or message) in Sentry Issues **and** emits a `logError` entry with the resulting `eventId`, attachment names, and supplied contexts.
- **Category 2 – Operational Errors & Warnings**: Use the helper that matches severity (`logError` or `logWarn`). These feed Sentry Logs only; provide remediation hints in `options.extra` and any request context via `options.contexts`.
- **Category 3 – Informational**: Use `logInfo` (or `logger.info`) for routine telemetry such as connection lifecycle, tool invocations, and configuration output.

All helpers accept `loggerScope`, `contexts`, and `extra`. `logIssue` also accepts `attachments` to mirror files added to the captured event.

**Testing note:** unit tests should avoid asserting on log helper invocations. Mock the helpers to silence output, but treat logs as an implementation detail.

Skip logging `UserInputError` and expected 4xx responses; follow the skip rules in @docs/monitoring.mdc.

## Context Propagation
- Bind request or connection IDs once (stdio server: `@packages/mcp-server/src/server.ts`; Cloudflare: `@packages/mcp-cloudflare/src/server/routes/*.ts`).
- Use LogTape’s async context helpers so child loggers inherit `mcp.session.id`, `gen_ai.system`, and `network.transport`.
- Expose helpers like `withRequestContext` to wrap tool handlers and prompt executions.

## Sentry Integration
- Configure a dedicated Sentry Logs project + dataset for ingestion; authenticate with log tokens exposed as `SENTRY_LOG_TOKEN`.
- Node transport posts to `https://ingest.sentry.io/api/{org}/{project}/log/` with `retryLimit`, `retryBackoff`, and chunk size ≤ 64 KB.
- Cloudflare transport uses `fetch` with streaming body; respect Workers’ 50 ms CPU limit by yielding between batches.
- React transport sends payloads to an MCP logging endpoint (or Sentry browser ingestion once available) using `sendBeacon` fallback; ensure payload size stays under 60 KB to avoid browser truncation.
- Map `logger.warn` → `level=warning`, `logger.info` → `level=info`, etc. Attach tags for `mcp.transport`, `service.version`, and deployment environment.

## Rollout Checklist
- [ ] Replace `console.*` calls in `packages/mcp-server/src/server.ts` and `src/index.ts` with `logInfo`/`logWarn`/`logIssue` as appropriate.
- [ ] Ensure `logIssue` paths include enough context to correlate with upstream tool requests.
- [ ] Confirm Cloudflare routes import `logIssue`/`logWarn` from `@sentry/mcp-server/logging` (no extra wrapper needed).
- [ ] Document configuration flags (`LOG_LEVEL`, `LOG_SAMPLE_RATE`, `SENTRY_LOG_TOKEN`) in @docs/deployment.mdc if needed.
- [ ] Verify redaction of API keys and secrets before enabling production sinks.
- [ ] Run `pnpm run tsc && pnpm run lint && pnpm run test` before merging.

## Observability Expectations
- Dashboards: create Sentry Log views for MCP connection churn, tool failures, and rate-limit retries.
- Alerts: trigger on sustained `logWarn`/`logError` volume spikes and frequent `logIssue` events.
- Sampling: default `info` to 100% in staging, tune prod via `MCP_LOG_LEVEL`; `logWarn`/`logError`/`logIssue` should remain unsampled.

## References
- Existing monitoring guidance: @docs/monitoring.mdc
- Current error logging helper: @packages/mcp-server/src/logging.ts
- MCP server lifecycle hooks: @packages/mcp-server/src/server.ts
- Cloudflare routes: @packages/mcp-cloudflare/src/server/routes/
- Sentry Logs product docs: https://docs.sentry.io/product/logs/
