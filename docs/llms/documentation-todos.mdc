# Documentation Improvement TODOs

Based on our style guide and scope definitions, here are the specific tasks for each document.

## High Priority - Core Structure

### 1. CLAUDE.md (268 → 150 lines)
- [ ] Remove all content that belongs in other docs
- [ ] Keep only: brief description, doc references, critical checks, Claude-specific notes
- [ ] Move project overview → architecture.mdc
- [ ] Move development setup → appropriate guides
- [ ] Move integration details → keep minimal

### 2. cursor.mdc (76 → 75 lines)  
- [ ] Already concise, just ensure consistency with CLAUDE.md structure
- [ ] Verify MDC header is correct
- [ ] Remove any redundant content

### 3. architecture.mdc (NEW - 250 lines)
- [ ] Extract architecture content from CLAUDE.md
- [ ] Add package interaction diagram (text-based)
- [ ] Document key architectural decisions
- [ ] Explain MCP concept mappings
- [ ] Reference actual implementation files

### 4. common-patterns.mdc (NEW - 350 lines)
- [ ] Extract shared patterns from all docs:
  - Error handling (UserInputError, ApiError)
  - Zod schema patterns
  - Response formatting
  - Parameter validation
  - TypeScript helpers
- [ ] Add code references for each pattern
- [ ] Create clear section anchors for linking

## High Priority - Feature Guides

### 5. adding-tools.mdc (414 → 300 lines)
- [ ] Remove duplicate testing patterns → link to testing.mdc
- [ ] Remove verbose examples → reference real tools
- [ ] Focus on tool-specific patterns only
- [ ] Add more references to actual implementations
- [ ] Condense the workflow steps

### 6. adding-prompts.mdc (275 → 225 lines)
- [ ] Remove overlap with adding-tools.mdc
- [ ] Focus on prompt-specific patterns
- [ ] Reference the 2 existing prompts as examples
- [ ] Remove generic prompt engineering advice
- [ ] Link to common patterns

### 7. adding-resources.mdc (765 → 250 lines) - BIGGEST REDUCTION
- [ ] Remove ALL verbose examples (currently has 500+ lines of examples)
- [ ] Keep only unique resource patterns
- [ ] Reference actual implementations in resources.ts
- [ ] Remove duplicate handler patterns
- [ ] Focus on resource-specific concepts only

## Medium Priority - Technical Guides

### 8. testing.mdc (from using-api-mocks.mdc - 405 → 300 lines)
- [ ] Rename from using-api-mocks.mdc
- [ ] Consolidate all testing patterns
- [ ] Remove MSW documentation → link to MSW docs
- [ ] Focus on project-specific test patterns
- [ ] Add snapshot update guidance

### 9. api-patterns.mdc (576 → 250 lines)
- [ ] Merge with api-client-patterns.mdc content
- [ ] Remove Zod documentation
- [ ] Remove duplicate error handling → link to common-patterns
- [ ] Focus on Sentry API specifics
- [ ] Condense mock examples

### 10. quality-checks.mdc (from coding-guidelines.mdc - 305 → 125 lines)
- [ ] Extract just the quality check commands
- [ ] Add when to run each check
- [ ] Add common failure fixes
- [ ] Remove all other content → other docs

## Low Priority - Operations

### 11. deployment.mdc (574 → 225 lines)
- [ ] Remove Cloudflare concepts explanation
- [ ] Focus on configuration only
- [ ] Remove duplicate OAuth content → link to security.mdc
- [ ] Condense to essential deployment steps

### 12. monitoring.mdc (559 → 175 lines)
- [ ] Remove Sentry product documentation
- [ ] Focus on integration patterns only
- [ ] Remove duplicate error handling
- [ ] Keep only project-specific telemetry

### 13. security.mdc (604 → 225 lines)
- [ ] Remove OAuth protocol explanation
- [ ] Focus on implementation only
- [ ] Remove general security advice
- [ ] Condense to project-specific patterns

## New Documents

### 14. README.md (Update existing)
- [ ] Create proper index with one-line descriptions
- [ ] Add quick navigation
- [ ] Reference style guide
- [ ] Keep under 150 lines

### 15. Remove these files:
- [ ] coding-guidelines.mdc (split into common-patterns + quality-checks)
- [ ] coding-practices.mdc (already renamed to cursor.mdc)
- [ ] package-management.mdc (already removed - common sense)

## Summary

**Total line reduction target**: ~4,600 → ~2,800 lines (40% reduction)

**Key strategies**:
1. Extract common patterns to single location
2. Reference code instead of recreating examples  
3. Remove external tool documentation
4. Focus on project-specific patterns only
5. Use cross-references instead of duplication

**Order of execution**:
1. Create common-patterns.mdc first (extract from all docs)
2. Create architecture.mdc (extract from CLAUDE.md)
3. Simplify CLAUDE.md and cursor.mdc
4. Reduce feature guides (tools, prompts, resources)
5. Consolidate technical guides
6. Trim operations guides