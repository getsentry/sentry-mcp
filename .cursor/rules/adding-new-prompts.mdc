---
description: This guide covers the workflow for adding new prompts to the Sentry MCP server package.
globs: 
alwaysApply: false
---
# Adding New Prompts to the MCP Server

Workflow for adding new prompts to the Sentry MCP server package.

## Overview

Prompts are pre-configured workflows that guide LLMs through complex tasks by orchestrating tools and resources. Each prompt consists of:

1. **Definition** - Schema and metadata in `promptDefinitions.ts`
2. **Handler** - Implementation logic in `prompts.ts`
3. **Tests** - Unit tests in `prompts.test.ts`
4. **Evals** - Integration tests in `mcp-server-evals`

## Step 1: Define the Prompt

Add your prompt definition to `packages/mcp-server/src/promptDefinitions.ts`:

```typescript
{
  name: "your_prompt_name" as const,
  description: [
    "One-line summary of what this prompt helps accomplish.",
    "Additional context about when to use this prompt.",
    "Mention if it leverages specific resources or requires particular context.",
  ].join("\n"),
  paramsSchema: {
    organizationSlug: ParamOrganizationSlug,
    yourParam: z.string().trim().describe("Description of this parameter"),
    includeHistoricalContext: z.boolean().optional().describe("Include user's recent activity and preferences"),
    timeRange: z.string().optional().describe("Time range for analysis (e.g., '24h', '7d', '30d')"),
  },
}
```

## Step 2: Implement the Handler

Add your handler to `packages/mcp-server/src/prompts.ts`:

```typescript
your_prompt_name: async (context, { organizationSlug, yourParam, includeHistoricalContext, timeRange }) => {
  // Validate parameters if needed
  if (!organizationSlug && !yourParam) {
    throw new Error(
      "Either organizationSlug or yourParam must be provided"
    );
  }

  // Build context-aware instructions
  const instructions = [
    `I want to ${describe_the_goal} in ${organizationSlug}.`,
    "",
    "## Phase 1: Gather Context",
    "",
    "Before taking actions, review available context resources:",
  ];

  // Add resource instructions based on parameters
  if (includeHistoricalContext) {
    instructions.push(
      "1. Check the `user-session-context` resource for:",
      "   - Recent searches and activity patterns",
      "   - User preferences and default filters", 
      "   - Previously visited projects and issues",
      "",
      "2. Review the `recent-activity-digest` resource for:",
      "   - Trending issues in this organization",
      "   - Recently resolved problems that might be related",
      ""
    );
  }

  instructions.push(
    "## Phase 2: Execute Actions",
    "",
    "Based on the context gathered, take appropriate actions:",
    "",
    "1. Use the `tool_name` tool to gather specific information:",
    `   - organizationSlug: "${organizationSlug}"`,
    timeRange ? `   - timeRange: "${timeRange}"` : "",
    "   - Apply any relevant filters from user session context",
    "",
    "2. Analyze the results in context of the background information",
    "",
    "## Phase 3: Synthesize Results",
    "",
    "Provide results with context awareness:",
    "- Reference user's typical workflow patterns",
    "- Connect findings to recent organizational trends", 
    "- Suggest actions based on user's role and permissions",
  );

  return instructions.join("\n");
},
```

## Step 3: Add Unit Tests

Create tests in `packages/mcp-server/src/prompts.test.ts`:

```typescript
import { describe, it, expect } from "vitest";
import { PROMPT_HANDLERS } from "./prompts";

describe("your_prompt_name", () => {
  it("generates context-aware instructions with all parameters", async () => {
    const prompt = PROMPT_HANDLERS.your_prompt_name;
    const result = await prompt(
      {
        accessToken: "access-token",
        userId: "1",
        organizationSlug: null,
      },
      {
        organizationSlug: "my-org",
        yourParam: "test-value",
        includeHistoricalContext: true,
        timeRange: "24h",
      }
    );

    expect(result).toContain("I want to");
    expect(result).toContain("my-org");
    expect(result).toContain("test-value");
    expect(result).toContain("`user-session-context`");
    expect(result).toContain("Phase 1: Gather Context");
    expect(result).toContain("Phase 2: Execute Actions");
  });

  it("adapts instructions based on context preferences", async () => {
    const prompt = PROMPT_HANDLERS.your_prompt_name;
    const resultWithContext = await prompt({}, { 
      organizationSlug: "org",
      includeHistoricalContext: true 
    });
    const resultWithoutContext = await prompt({}, { 
      organizationSlug: "org",
      includeHistoricalContext: false 
    });

    expect(resultWithContext).toContain("user-session-context");
    expect(resultWithoutContext).not.toContain("user-session-context");
  });

  it("handles missing required parameters", async () => {
    const prompt = PROMPT_HANDLERS.your_prompt_name;

    await expect(
      prompt({}, { organizationSlug: null, yourParam: null })
    ).rejects.toThrow("Either organizationSlug or yourParam must be provided");
  });
});
```

## Step 4: Add Evaluation Tests

Create `packages/mcp-server-evals/src/evals/your-prompt.eval.ts`:

```typescript
import { describeEval } from "vitest-evals";
import { Factuality, FIXTURES, PromptRunner } from "./utils";

describeEval("your-prompt-context-management", {
  data: async () => {
    return [
      {
        input: `Use the your_prompt_name prompt for ${FIXTURES.organizationSlug} with full context`,
        expected: "Should reference user session context and recent activity before taking actions",
      },
      {
        input: `Run your_prompt_name with visual analysis for issue ISSUE-123`,
        expected: "Should mention checking issue-attachments resource for screenshots and logs",
      },
    ];
  },
  task: PromptRunner("your_prompt_name"),
  scorers: [Factuality()],
  threshold: 0.8,
  timeout: 45000,
});
```

## Common Prompt Patterns

### Session-Aware Investigation

```typescript
return [
  `I'll investigate ${issueType} issues in ${organizationSlug}, leveraging your recent activity for context.`,
  "",
  "## Context Foundation",
  "1. Review `user-session-context` resource:",
  "   - Your recent search patterns and focus areas",
  "   - Preferred time ranges and filter settings",
  "",
  "## Contextual Analysis",
  "2. Use `find_issues` with context-informed parameters:",
  "   - Apply your typical filters as defaults",
  "   - Focus on projects matching your recent activity",
  "",
  "## Pattern Recognition",
  "3. Cross-reference findings with `organization-trends`:",
  "   - Note if this fits recent organizational patterns",
  "   - Flag if this represents a new or escalating issue",
].join("\n");
```

### Multi-Modal Error Analysis

```typescript
return [
  `I'll perform comprehensive error analysis including visual content for ${issueId}.`,
  "",
  "## Multi-Source Data Gathering",
  "1. Get structured error data with `get_issue_details`",
  "2. Access `issue-attachments` resource for:",
  "   - Screenshots: Analyze UI state, error dialogs, console outputs",
  "   - Log files: Parse for timing patterns, error cascades, system state",
  "",
  "## Live System Context",
  "3. Check `project-health-snapshot` for:",
  "   - Current system performance metrics",
  "   - Active alerts that might be related",
  "",
  "## Synthesis with Visual Evidence",
  "4. Combine all data sources for comprehensive diagnosis:",
  "   - Reference specific UI elements from screenshots",
  "   - Quote relevant log entries with timing context",
].join("\n");
```

### Parameter Validation Pattern

```typescript
your_prompt_name: async (context, { organizationSlug, issueId, issueUrl, includeVisualAnalysis }) => {
  // Handle multiple parameter options
  let contextMessage: string;
  if (issueUrl) {
    contextMessage = `The issue URL is ${issueUrl}`;
  } else if (organizationSlug && issueId) {
    contextMessage = `The issue ${issueId} in organization ${organizationSlug}`;
  } else {
    throw new Error(
      "Either issueUrl or both organizationSlug and issueId must be provided"
    );
  }

  // Resource availability guidance
  const instructions = [contextMessage];
  
  if (includeVisualAnalysis) {
    instructions.push(
      "",
      "Note: Visual analysis requested. I'll check the `issue-attachments` resource for screenshots and images to analyze alongside the error data."
    );
  }

  // Rest of implementation...
};
```

## Best Practices

- **Leverage resource context first**: Always check available context before taking actions
- **Make context usage explicit**: Tell the LLM which resources to check and why
- **Adapt to context availability**: Gracefully handle missing or limited context
- **Reference context in explanations**: Connect findings back to user's patterns and preferences
- **Build structured workflows**: Use clear phases (Gather Context, Execute Actions, Synthesize)
- **Handle parameter flexibility**: Support multiple input patterns (URL vs org+id)
- **Include visual analysis**: Support screenshot and log file analysis when appropriate
- **Provide actionable guidance**: End with specific next steps and tool recommendations
