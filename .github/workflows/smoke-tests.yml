name: Smoke Tests

on:
  workflow_run:
    workflows: ["Preview Deploy"]
    types:
      - completed

permissions:
  contents: read
  statuses: write

jobs:
  smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      # Checkout from main branch for safety - we only need the test scripts,
      # not the PR code (which is already deployed to preview)
      - uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # pnpm/action-setup@v4
      - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda
        name: Install pnpm
        with:
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Generate Preview URL
        id: preview_url
        run: |
          # Get the branch name from the workflow run event (safe - just metadata)
          BRANCH_NAME="${{ github.event.workflow_run.head_branch }}"
          # Generate worker name using the same logic as preview-deploy
          # Sanitize branch name for worker name (must match preview-deploy.yml logic)
          SANITIZED=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
          SANITIZED=$(echo "$SANITIZED" | sed 's/^-*//' | sed 's/-*$//')
          SANITIZED=$(echo "$SANITIZED" | sed 's/--*/-/g')
          if echo "$SANITIZED" | grep -q '^[0-9]'; then
            SANITIZED="br-$SANITIZED"
          fi
          if [ -z "$SANITIZED" ]; then
            SANITIZED="preview"
          fi
          SANITIZED=$(echo "$SANITIZED" | cut -c1-20)
          SANITIZED=$(echo "$SANITIZED" | sed 's/-*$//')
          WORKER_NAME="sentry-mcp-preview-${SANITIZED}"
          SUBDOMAIN="getsentry"
          PREVIEW_URL="https://${WORKER_NAME}.${SUBDOMAIN}.workers.dev"
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "worker_name=$WORKER_NAME" >> $GITHUB_OUTPUT
          echo "url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "Preview URL to test: $PREVIEW_URL"

      - name: Wait for deployment to propagate
        run: |
          echo "Waiting 30 seconds for deployment to fully propagate..."
          sleep 30

      - name: Run Smoke Tests
        id: smoke_tests
        working-directory: packages/smoke-tests
        env:
          PREVIEW_URL: ${{ steps.preview_url.outputs.url }}
        run: |
          echo "Running smoke tests against $PREVIEW_URL"
          pnpm test

      - name: Set Commit Status
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const testsSuccess = '${{ steps.smoke_tests.outcome }}' === 'success';
            const previewUrl = '${{ steps.preview_url.outputs.url }}';
            
            let state = testsSuccess ? 'success' : 'failure';
            let description = testsSuccess ? 'All smoke tests passed' : 'Some smoke tests failed';
            
            // Get the head SHA from the workflow run
            const headSha = '${{ github.event.workflow_run.head_sha }}';
            
            try {
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: headSha,
                state: state,
                target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
                description: description,
                context: 'Smoke Tests'
              });
            } catch (error) {
              console.error('Failed to create commit status:', error);
              // Don't fail the workflow if status update fails
            }