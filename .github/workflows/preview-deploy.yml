name: Preview Deploy

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  preview:
    name: Deploy Preview Version
    runs-on: ubuntu-latest
    environment: Actions
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # pnpm/action-setup@v4
      - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda
        name: Install pnpm
        with:
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

      - name: Deploy Preview Environment
        id: deploy_preview
        working-directory: packages/mcp-cloudflare
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Get branch name and sanitize it for use as environment name
          # Replace non-alphanumeric characters with hyphens, lowercase, and truncate
          BRANCH_NAME="${{ github.head_ref }}"
          # Wrangler env names: alphanumeric, hyphens, underscores only
          ENV_NAME=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]' | cut -c1-20)
          ENV_NAME="preview-${ENV_NAME}"
          
          # Deploy to preview environment (creates separate Worker)
          echo "Deploying to environment: $ENV_NAME"
          OUTPUT=$(pnpx wrangler deploy --env "$ENV_NAME" 2>&1)
          echo "$OUTPUT"
          
          echo "ENV_NAME=$ENV_NAME" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Deploy completed for environment: $ENV_NAME"

      - name: Get Worker Details
        id: worker_details
        working-directory: packages/mcp-cloudflare
        run: |
          # Get the base worker name
          WORKER_NAME=$(grep '"name"' wrangler.jsonc | sed 's/.*"name":\s*"\([^"]*\)".*/\1/')
          echo "WORKER_NAME=$WORKER_NAME" >> $GITHUB_OUTPUT
          
          # Workers.dev subdomain
          SUBDOMAIN="getsentry"
          echo "SUBDOMAIN=$SUBDOMAIN" >> $GITHUB_OUTPUT
          
          # Construct preview URL using environment name
          # Wrangler creates: <worker-name>-<env-name>.<subdomain>.workers.dev
          ENV_NAME="${{ steps.deploy_preview.outputs.ENV_NAME }}"
          PREVIEW_URL="https://${WORKER_NAME}-${ENV_NAME}.${SUBDOMAIN}.workers.dev"
          echo "PREVIEW_URL=$PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "Preview URL: $PREVIEW_URL"

      - name: Run Smoke Tests
        id: smoke_tests
        continue-on-error: true
        working-directory: packages/smoke-tests
        env:
          PREVIEW_URL: ${{ steps.worker_details.outputs.PREVIEW_URL }}
        run: |
          # Wait for deployment to propagate
          echo "Waiting for deployment to propagate..."
          sleep 30
          
          # Run smoke tests with Vitest
          echo "Running smoke tests against $PREVIEW_URL"
          pnpm test

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = '${{ steps.deploy_preview.outputs.BRANCH_NAME }}';
            const envName = '${{ steps.deploy_preview.outputs.ENV_NAME }}';
            const previewUrl = '${{ steps.worker_details.outputs.PREVIEW_URL }}';
            const testsStatus = '${{ steps.smoke_tests.outcome }}' === 'success' ? '✅' : '❌';
            const testsMessage = '${{ steps.smoke_tests.outcome }}' === 'success' 
              ? 'All smoke tests passed!' 
              : 'Some smoke tests failed. Check the workflow logs for details.';
            
            const comment = `## 🚀 Preview Deployment
            
            **Branch:** \`${branchName}\`
            **Environment:** \`${envName}\`
            **Preview URL:** ${previewUrl}
            **Status:** Isolated preview environment (no production traffic)
            
            ### Smoke Tests: ${testsStatus}
            ${testsMessage}
            
            ### Next Steps:
            - This is a separate preview environment with its own URL
            - Test using the preview URL above to validate your changes
            - The preview is completely isolated from production
            - Once tests pass and PR is approved, it can be merged
            - After merge, the main deployment workflow will deploy to production
            
            ---
            *Deployed via GitHub Actions at ${new Date().toISOString()}*`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## 🚀 Preview Deployment')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }


      - name: Set Status Check
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const state = '${{ steps.smoke_tests.outcome }}' === 'success' ? 'success' : 'failure';
            const description = state === 'success' 
              ? 'Preview deployed and tests passed' 
              : 'Preview deployment failed tests';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: state,
              target_url: '${{ steps.worker_details.outputs.PREVIEW_URL }}',
              description: description,
              context: 'cloudflare-preview'
            });