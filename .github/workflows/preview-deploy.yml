name: Preview Deploy

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  statuses: write  # Required for creating commit statuses

jobs:
  preview:
    name: Deploy Preview Version
    runs-on: ubuntu-latest
    environment: Actions
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # pnpm/action-setup@v4
      - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda
        name: Install pnpm
        with:
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

      - name: Generate Environment Name
        id: env_name
        run: |
          # Get branch name and sanitize it for use as environment name
          BRANCH_NAME="${{ github.head_ref }}"
          # Wrangler env names: alphanumeric, hyphens, underscores only
          # Truncate to 10 chars to leave room for "preview-" prefix
          ENV_SUFFIX=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]' | cut -c1-10)
          ENV_NAME="preview-${ENV_SUFFIX}"
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "env_name=$ENV_NAME" >> $GITHUB_OUTPUT
          echo "Preview environment name: $ENV_NAME"

      - name: Deploy Preview Environment
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: packages/mcp-cloudflare
          command: deploy --env ${{ steps.env_name.outputs.env_name }}
          packageManager: pnpm

      - name: Generate Preview URL
        id: preview_url
        run: |
          # Construct preview URL
          # Wrangler creates: <worker-name>-<env-name>.<subdomain>.workers.dev
          WORKER_NAME="sentry-mcp"
          SUBDOMAIN="getsentry"
          ENV_NAME="${{ steps.env_name.outputs.env_name }}"
          PREVIEW_URL="https://${WORKER_NAME}-${ENV_NAME}.${SUBDOMAIN}.workers.dev"
          
          echo "url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "Preview URL: $PREVIEW_URL"

      - name: Wait for Deployment
        run: |
          echo "Waiting for deployment to propagate..."
          sleep 30

      - name: Run Smoke Tests
        id: smoke_tests
        continue-on-error: true
        working-directory: packages/smoke-tests
        env:
          PREVIEW_URL: ${{ steps.preview_url.outputs.url }}
        run: |
          echo "Running smoke tests against $PREVIEW_URL"
          pnpm test

      - name: Comment on PR
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = '${{ steps.env_name.outputs.branch_name }}';
            const envName = '${{ steps.env_name.outputs.env_name }}';
            const previewUrl = '${{ steps.preview_url.outputs.url }}';
            const deploySuccess = '${{ steps.deploy.outcome }}' === 'success';
            const testsStatus = '${{ steps.smoke_tests.outcome }}' === 'success' ? '✅' : '❌';
            const testsMessage = '${{ steps.smoke_tests.outcome }}' === 'success' 
              ? 'All smoke tests passed!' 
              : 'Some smoke tests failed. Check the workflow logs for details.';
            
            let comment;
            if (!deploySuccess) {
              comment = `## 🚨 Preview Deployment Failed
              
              **Branch:** \`${branchName}\`
              **Environment:** \`${envName}\`
              
              The deployment failed. Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
              
              Common issues:
              - Environment names must be alphanumeric with hyphens/underscores only
              - Check if the Cloudflare API token has proper permissions
              - Verify the wrangler configuration is valid`;
            } else {
              comment = `## 🚀 Preview Deployment
              
              **Branch:** \`${branchName}\`
              **Environment:** \`${envName}\`
              **Preview URL:** ${previewUrl}
              **Status:** Isolated preview environment (no production traffic)
              
              ### Smoke Tests: ${testsStatus}
              ${testsMessage}
              
              ### Next Steps:
              - This is a separate preview environment with its own URL
              - Test using the preview URL above to validate your changes
              - The preview is completely isolated from production
              - Once tests pass and PR is approved, it can be merged
              - After merge, the main deployment workflow will deploy to production`;
            }
            
            comment += `\n\n---\n*Deployed via GitHub Actions at ${new Date().toISOString()}*`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## 🚀 Preview Deployment')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Set Commit Status
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deploySuccess = '${{ steps.deploy.outcome }}' === 'success';
            const testsSuccess = '${{ steps.smoke_tests.outcome }}' === 'success';
            
            let state, description;
            if (!deploySuccess) {
              state = 'failure';
              description = 'Preview deployment failed';
            } else if (!testsSuccess) {
              state = 'failure';
              description = 'Preview deployed but tests failed';
            } else {
              state = 'success';
              description = 'Preview deployed and tests passed';
            }
            
            try {
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.payload.pull_request.head.sha,
                state: state,
                target_url: '${{ steps.preview_url.outputs.url }}',
                description: description,
                context: 'cloudflare-preview'
              });
            } catch (error) {
              console.error('Failed to create commit status:', error);
              // Don't fail the workflow if status update fails
            }