#!/usr/bin/env tsx
/**
 * Generate tool definitions TypeScript file for client consumption.
 *
 * This script imports all tools from src/tools/index and exports their
 * definitions (name, description, inputSchema) with proper TypeScript types
 * and Zod schemas converted to JSON Schema.
 */

import * as fs from "node:fs";
import * as path from "node:path";
import { fileURLToPath } from "node:url";
import { zodToJsonSchema } from "zod-to-json-schema";
import type { z } from "zod";

// Get the directory of this script
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Import tools from the source directory (TypeScript)
const tools = await import("../src/tools/index.ts");

/**
 * Convert Zod schema object to JSON Schema properties
 */
function convertInputSchemaToJsonSchema(inputSchema: Record<string, any>) {
  if (!inputSchema || Object.keys(inputSchema).length === 0) {
    return {};
  }

  const properties: Record<string, any> = {};

  // Convert each individual Zod schema to JSON Schema
  for (const [key, zodSchema] of Object.entries(inputSchema)) {
    const jsonSchema = zodToJsonSchema(zodSchema, {
      $refStrategy: "none", // Don't use $ref for cleaner output
    });
    properties[key] = jsonSchema;
  }

  return properties;
}

/**
 * Generate TypeScript code for tool definitions
 */
function generateTypeScriptCode() {
  const toolsDefault = tools.default;

  if (!toolsDefault || typeof toolsDefault !== "object") {
    throw new Error("Failed to import tools from src/tools/index.ts");
  }

  const definitions = Object.entries(toolsDefault).map(([key, tool]) => {
    if (!tool || typeof tool !== "object") {
      throw new Error(`Invalid tool: ${key}`);
    }

    const toolObj = tool as {
      name: string;
      description: string;
      inputSchema: Record<string, any>;
    };

    if (!toolObj.name || !toolObj.description) {
      throw new Error(`Tool ${key} is missing name or description`);
    }

    // Convert Zod schemas to JSON Schema
    const inputSchema = convertInputSchemaToJsonSchema(
      toolObj.inputSchema || {},
    );

    return {
      name: toolObj.name,
      description: toolObj.description,
      inputSchema,
    };
  });

  // Generate TypeScript code
  const code = `// This file is auto-generated by generate-tool-definitions-ts.ts
// Do not edit manually

/**
 * JSON Schema type definitions for better type safety
 */
export interface JsonSchema {
  type?: string;
  description?: string;
  enum?: readonly string[];
  anyOf?: readonly JsonSchema[];
  properties?: Record<string, JsonSchema>;
  required?: readonly string[];
  items?: JsonSchema;
  minimum?: number;
  maximum?: number;
  minLength?: number;
  maxLength?: number;
  pattern?: string;
  format?: string;
  default?: any;
  $schema?: string;
  not?: JsonSchema | Record<string, never>;
  [key: string]: any;
}

/**
 * Tool definition with properly typed input schema
 */
export interface ToolDefinition {
  name: string;
  description: string;
  inputSchema: Record<string, JsonSchema>;
}

/**
 * All tool definitions with literal types for tool names
 */
export const TOOL_DEFINITIONS = ${JSON.stringify(definitions, null, 2)} as const satisfies readonly ToolDefinition[];

/**
 * Union type of all tool names for type-safe usage
 */
export type ToolName = typeof TOOL_DEFINITIONS[number]["name"];

/**
 * Helper to get a specific tool definition by name
 */
export function getToolDefinition<T extends ToolName>(
  name: T
): Extract<typeof TOOL_DEFINITIONS[number], { name: T }> | undefined {
  return TOOL_DEFINITIONS.find((tool) => tool.name === name) as any;
}

/**
 * Type-safe tool definitions array
 */
const toolDefinitions: ToolDefinition[] = [...TOOL_DEFINITIONS];

export default toolDefinitions;
`;

  return code;
}

/**
 * Main function to generate and write tool definitions.
 */
async function main() {
  try {
    console.log("Generating TypeScript tool definitions...");

    const code = generateTypeScriptCode();

    // Write the definitions to TypeScript file
    const outputPath = path.join(__dirname, "../src/toolDefinitions.ts");
    fs.writeFileSync(outputPath, code);

    console.log(`‚úÖ Generated TypeScript tool definitions`);
    console.log(`üìÑ Output: ${outputPath}`);

    // Run prettier on the generated file if available
    try {
      const { execSync } = await import("node:child_process");
      execSync(`npx prettier --write ${outputPath}`, { stdio: "inherit" });
      console.log("‚ú® Formatted with Prettier");
    } catch {
      // Prettier not available, that's ok
    }
  } catch (error) {
    console.error("‚ùå Failed to generate tool definitions:", error);
    process.exit(1);
  }
}

// Run the script
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}
